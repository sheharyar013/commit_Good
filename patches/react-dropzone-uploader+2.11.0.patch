diff --git a/node_modules/react-dropzone-uploader/.DS_Store b/node_modules/react-dropzone-uploader/.DS_Store
new file mode 100644
index 0000000..b9c5fda
Binary files /dev/null and b/node_modules/react-dropzone-uploader/.DS_Store differ
diff --git a/node_modules/react-dropzone-uploader/dist/Dropzone.tsx b/node_modules/react-dropzone-uploader/dist/Dropzone.tsx
deleted file mode 100644
index da29a80..0000000
--- a/node_modules/react-dropzone-uploader/dist/Dropzone.tsx
+++ /dev/null
@@ -1,816 +0,0 @@
-import React from 'react'
-import PropTypes from 'prop-types'
-
-import LayoutDefault from './Layout'
-import InputDefault from './Input'
-import PreviewDefault from './Preview'
-import SubmitButtonDefault from './SubmitButton'
-import {
-  formatBytes,
-  formatDuration,
-  accepts,
-  resolveValue,
-  mergeStyles,
-  defaultClassNames,
-  getFilesFromEvent as defaultGetFilesFromEvent,
-} from './utils'
-
-export type StatusValue =
-  | 'rejected_file_type'
-  | 'rejected_max_files'
-  | 'preparing'
-  | 'error_file_size'
-  | 'error_validation'
-  | 'ready'
-  | 'started'
-  | 'getting_upload_params'
-  | 'error_upload_params'
-  | 'uploading'
-  | 'exception_upload'
-  | 'aborted'
-  | 'restarted'
-  | 'removed'
-  | 'error_upload'
-  | 'headers_received'
-  | 'done'
-
-export type MethodValue =
-  | 'delete'
-  | 'get'
-  | 'head'
-  | 'options'
-  | 'patch'
-  | 'post'
-  | 'put'
-  | 'DELETE'
-  | 'GET'
-  | 'HEAD'
-  | 'OPTIONS'
-  | 'PATCH'
-  | 'POST'
-  | 'PUT'
-
-export interface IMeta {
-  id: string
-  status: StatusValue
-  type: string // MIME type, example: `image/*`
-  name: string
-  uploadedDate: string // ISO string
-  percent: number
-  size: number // bytes
-  lastModifiedDate: string // ISO string
-  previewUrl?: string // from URL.createObjectURL
-  duration?: number // seconds
-  width?: number
-  height?: number
-  videoWidth?: number
-  videoHeight?: number
-  validationError?: any
-}
-
-export interface IFileWithMeta {
-  file: File
-  meta: IMeta
-  cancel: () => void
-  restart: () => void
-  remove: () => void
-  xhr?: XMLHttpRequest
-}
-
-export interface IExtra {
-  active: boolean
-  reject: boolean
-  dragged: DataTransferItem[]
-  accept: string
-  multiple: boolean
-  minSizeBytes: number
-  maxSizeBytes: number
-  maxFiles: number
-}
-
-export interface IUploadParams {
-  url: string
-  method?: MethodValue
-  body?: string | FormData | ArrayBuffer | Blob | File | URLSearchParams
-  fields?: { [name: string]: string | Blob }
-  headers?: { [name: string]: string }
-  meta?: { [name: string]: any }
-}
-
-export type CustomizationFunction<T> = (allFiles: IFileWithMeta[], extra: IExtra) => T
-
-export interface IStyleCustomization<T> {
-  dropzone?: T | CustomizationFunction<T>
-  dropzoneActive?: T | CustomizationFunction<T>
-  dropzoneReject?: T | CustomizationFunction<T>
-  dropzoneDisabled?: T | CustomizationFunction<T>
-  input?: T | CustomizationFunction<T>
-  inputLabel?: T | CustomizationFunction<T>
-  inputLabelWithFiles?: T | CustomizationFunction<T>
-  preview?: T | CustomizationFunction<T>
-  previewImage?: T | CustomizationFunction<T>
-  submitButtonContainer?: T | CustomizationFunction<T>
-  submitButton?: T | CustomizationFunction<T>
-}
-
-export interface IExtraLayout extends IExtra {
-  onFiles(files: File[]): void
-  onCancelFile(file: IFileWithMeta): void
-  onRemoveFile(file: IFileWithMeta): void
-  onRestartFile(file: IFileWithMeta): void
-}
-
-export interface ILayoutProps {
-  files: IFileWithMeta[]
-  extra: IExtraLayout
-  input: React.ReactNode
-  previews: React.ReactNode[] | null
-  submitButton: React.ReactNode
-  dropzoneProps: {
-    ref: React.RefObject<HTMLDivElement>
-    className: string
-    style?: React.CSSProperties
-    onDragEnter(event: React.DragEvent<HTMLElement>): void
-    onDragOver(event: React.DragEvent<HTMLElement>): void
-    onDragLeave(event: React.DragEvent<HTMLElement>): void
-    onDrop(event: React.DragEvent<HTMLElement>): void
-  }
-}
-
-interface ICommonProps {
-  files: IFileWithMeta[]
-  extra: IExtra
-}
-
-export interface IPreviewProps extends ICommonProps {
-  meta: IMeta
-  className?: string
-  imageClassName?: string
-  style?: React.CSSProperties
-  imageStyle?: React.CSSProperties
-  fileWithMeta: IFileWithMeta
-  isUpload: boolean
-  canCancel: boolean
-  canRemove: boolean
-  canRestart: boolean
-}
-
-export interface IInputProps extends ICommonProps {
-  className?: string
-  labelClassName?: string
-  labelWithFilesClassName?: string
-  style?: React.CSSProperties
-  labelStyle?: React.CSSProperties
-  labelWithFilesStyle?: React.CSSProperties
-  getFilesFromEvent: (event: React.ChangeEvent<HTMLInputElement>) => Promise<File[]>
-  accept: string
-  multiple: boolean
-  disabled: boolean
-  content?: React.ReactNode
-  withFilesContent?: React.ReactNode
-  onFiles: (files: File[]) => void
-}
-
-export interface ISubmitButtonProps extends ICommonProps {
-  className?: string
-  buttonClassName?: string
-  style?: React.CSSProperties
-  buttonStyle?: React.CSSProperties
-  disabled: boolean
-  content?: React.ReactNode
-  onSubmit: (files: IFileWithMeta[]) => void
-}
-
-type ReactComponent<Props> = (props: Props) => React.ReactNode | React.Component<Props>
-
-export interface IDropzoneProps {
-  onChangeStatus?(
-    file: IFileWithMeta,
-    status: StatusValue,
-    allFiles: IFileWithMeta[],
-  ): { meta: { [name: string]: any } } | void
-  getUploadParams?(file: IFileWithMeta): IUploadParams | Promise<IUploadParams>
-  onSubmit?(successFiles: IFileWithMeta[], allFiles: IFileWithMeta[]): void
-
-  getFilesFromEvent?: (
-    event: React.DragEvent<HTMLElement> | React.ChangeEvent<HTMLInputElement>,
-  ) => Promise<File[]> | File[]
-  getDataTransferItemsFromEvent?: (
-    event: React.DragEvent<HTMLElement>,
-  ) => Promise<DataTransferItem[]> | DataTransferItem[]
-
-  accept: string
-  multiple: boolean
-  minSizeBytes: number
-  maxSizeBytes: number
-  maxFiles: number
-
-  validate?(file: IFileWithMeta): any // usually a string, but can be anything
-
-  autoUpload: boolean
-  timeout?: number
-
-  initialFiles?: File[]
-
-  /* component customization */
-  disabled: boolean | CustomizationFunction<boolean>
-
-  canCancel: boolean | CustomizationFunction<boolean>
-  canRemove: boolean | CustomizationFunction<boolean>
-  canRestart: boolean | CustomizationFunction<boolean>
-
-  inputContent: React.ReactNode | CustomizationFunction<React.ReactNode>
-  inputWithFilesContent: React.ReactNode | CustomizationFunction<React.ReactNode>
-
-  submitButtonDisabled: boolean | CustomizationFunction<boolean>
-  submitButtonContent: React.ReactNode | CustomizationFunction<React.ReactNode>
-
-  classNames: IStyleCustomization<string>
-  styles: IStyleCustomization<React.CSSProperties>
-  addClassNames: IStyleCustomization<string>
-
-  /* component injection */
-  LayoutComponent?: ReactComponent<ILayoutProps>
-  PreviewComponent?: ReactComponent<IPreviewProps>
-  InputComponent?: ReactComponent<IInputProps>
-  SubmitButtonComponent?: ReactComponent<ISubmitButtonProps>
-}
-
-class Dropzone extends React.Component<IDropzoneProps, { active: boolean; dragged: (File | DataTransferItem)[] }> {
-  static defaultProps: IDropzoneProps
-  protected files: IFileWithMeta[]
-  protected mounted: boolean
-  protected dropzone: React.RefObject<HTMLDivElement>
-  protected dragTimeoutId?: number
-
-  constructor(props: IDropzoneProps) {
-    super(props)
-    this.state = {
-      active: false,
-      dragged: [],
-    }
-    this.files = []
-    this.mounted = true
-    this.dropzone = React.createRef()
-  }
-
-  componentDidMount() {
-    if (this.props.initialFiles) this.handleFiles(this.props.initialFiles)
-  }
-
-  componentDidUpdate(prevProps: IDropzoneProps) {
-    const { initialFiles } = this.props
-    if (prevProps.initialFiles !== initialFiles && initialFiles) this.handleFiles(initialFiles)
-  }
-
-  componentWillUnmount() {
-    this.mounted = false
-    for (const fileWithMeta of this.files) this.handleCancel(fileWithMeta)
-  }
-
-  forceUpdate = () => {
-    if (this.mounted) super.forceUpdate()
-  }
-
-  getFilesFromEvent = () => {
-    return this.props.getFilesFromEvent || defaultGetFilesFromEvent
-  }
-
-  getDataTransferItemsFromEvent = () => {
-    return this.props.getDataTransferItemsFromEvent || defaultGetFilesFromEvent
-  }
-
-  handleDragEnter = async (e: React.DragEvent<HTMLElement>) => {
-    e.preventDefault()
-    e.stopPropagation()
-    const dragged = (await this.getDataTransferItemsFromEvent()(e)) as DataTransferItem[]
-    this.setState({ active: true, dragged })
-  }
-
-  handleDragOver = async (e: React.DragEvent<HTMLElement>) => {
-    e.preventDefault()
-    e.stopPropagation()
-    clearTimeout(this.dragTimeoutId)
-    const dragged = await this.getDataTransferItemsFromEvent()(e)
-    this.setState({ active: true, dragged })
-  }
-
-  handleDragLeave = (e: React.DragEvent<HTMLElement>) => {
-    e.preventDefault()
-    e.stopPropagation()
-    // prevents repeated toggling of `active` state when file is dragged over children of uploader
-    // see: https://www.smashingmagazine.com/2018/01/drag-drop-file-uploader-vanilla-js/
-    this.dragTimeoutId = window.setTimeout(() => this.setState({ active: false, dragged: [] }), 150)
-  }
-
-  handleDrop = async (e: React.DragEvent<HTMLElement>) => {
-    e.preventDefault()
-    e.stopPropagation()
-    this.setState({ active: false, dragged: [] })
-    const files = (await this.getFilesFromEvent()(e)) as File[]
-    this.handleFiles(files)
-  }
-
-  handleDropDisabled = (e: React.DragEvent<HTMLElement>) => {
-    e.preventDefault()
-    e.stopPropagation()
-    this.setState({ active: false, dragged: [] })
-  }
-
-  handleChangeStatus = (fileWithMeta: IFileWithMeta) => {
-    if (!this.props.onChangeStatus) return
-    const { meta = {} } = this.props.onChangeStatus(fileWithMeta, fileWithMeta.meta.status, this.files) || {}
-    if (meta) {
-      delete meta.status
-      fileWithMeta.meta = { ...fileWithMeta.meta, ...meta }
-      this.forceUpdate()
-    }
-  }
-
-  handleSubmit = (files: IFileWithMeta[]) => {
-    if (this.props.onSubmit) this.props.onSubmit(files, [...this.files])
-  }
-
-  handleCancel = (fileWithMeta: IFileWithMeta) => {
-    if (fileWithMeta.meta.status !== 'uploading') return
-    fileWithMeta.meta.status = 'aborted'
-    if (fileWithMeta.xhr) fileWithMeta.xhr.abort()
-    this.handleChangeStatus(fileWithMeta)
-    this.forceUpdate()
-  }
-
-  handleRemove = (fileWithMeta: IFileWithMeta) => {
-    const index = this.files.findIndex(f => f === fileWithMeta)
-    if (index !== -1) {
-      URL.revokeObjectURL(fileWithMeta.meta.previewUrl || '')
-      fileWithMeta.meta.status = 'removed'
-      this.handleChangeStatus(fileWithMeta)
-      this.files.splice(index, 1)
-      this.forceUpdate()
-    }
-  }
-
-  handleRestart = (fileWithMeta: IFileWithMeta) => {
-    if (!this.props.getUploadParams) return
-
-    if (fileWithMeta.meta.status === 'ready') fileWithMeta.meta.status = 'started'
-    else fileWithMeta.meta.status = 'restarted'
-    this.handleChangeStatus(fileWithMeta)
-
-    fileWithMeta.meta.status = 'getting_upload_params'
-    fileWithMeta.meta.percent = 0
-    this.handleChangeStatus(fileWithMeta)
-    this.forceUpdate()
-    this.uploadFile(fileWithMeta)
-  }
-
-  // expects an array of File objects
-  handleFiles = (files: File[]) => {
-    files.forEach((f, i) => this.handleFile(f, `${new Date().getTime()}-${i}`))
-    const { current } = this.dropzone
-    if (current) setTimeout(() => current.scroll({ top: current.scrollHeight, behavior: 'smooth' }), 150)
-  }
-
-  handleFile = async (file: File, id: string) => {
-    const { name, size, type, lastModified } = file
-    const { minSizeBytes, maxSizeBytes, maxFiles, accept, getUploadParams, autoUpload, validate } = this.props
-
-    const uploadedDate = new Date().toISOString()
-    const lastModifiedDate = lastModified && new Date(lastModified).toISOString()
-    const fileWithMeta = {
-      file,
-      meta: { name, size, type, lastModifiedDate, uploadedDate, percent: 0, id },
-    } as IFileWithMeta
-
-    // firefox versions prior to 53 return a bogus mime type for file drag events,
-    // so files with that mime type are always accepted
-    if (file.type !== 'application/x-moz-file' && !accepts(file, accept)) {
-      fileWithMeta.meta.status = 'rejected_file_type'
-      this.handleChangeStatus(fileWithMeta)
-      return
-    }
-    if (this.files.length >= maxFiles) {
-      fileWithMeta.meta.status = 'rejected_max_files'
-      this.handleChangeStatus(fileWithMeta)
-      return
-    }
-
-    fileWithMeta.cancel = () => this.handleCancel(fileWithMeta)
-    fileWithMeta.remove = () => this.handleRemove(fileWithMeta)
-    fileWithMeta.restart = () => this.handleRestart(fileWithMeta)
-
-    fileWithMeta.meta.status = 'preparing'
-    this.files.push(fileWithMeta)
-    this.handleChangeStatus(fileWithMeta)
-    this.forceUpdate()
-
-    if (size < minSizeBytes || size > maxSizeBytes) {
-      fileWithMeta.meta.status = 'error_file_size'
-      this.handleChangeStatus(fileWithMeta)
-      this.forceUpdate()
-      return
-    }
-
-    await this.generatePreview(fileWithMeta)
-
-    if (validate) {
-      const error = validate(fileWithMeta)
-      if (error) {
-        fileWithMeta.meta.status = 'error_validation'
-        fileWithMeta.meta.validationError = error // usually a string, but doesn't have to be
-        this.handleChangeStatus(fileWithMeta)
-        this.forceUpdate()
-        return
-      }
-    }
-
-    if (getUploadParams) {
-      if (autoUpload) {
-        this.uploadFile(fileWithMeta)
-        fileWithMeta.meta.status = 'getting_upload_params'
-      } else {
-        fileWithMeta.meta.status = 'ready'
-      }
-    } else {
-      fileWithMeta.meta.status = 'done'
-    }
-    this.handleChangeStatus(fileWithMeta)
-    this.forceUpdate()
-  }
-
-  generatePreview = async (fileWithMeta: IFileWithMeta) => {
-    const {
-      meta: { type },
-      file,
-    } = fileWithMeta
-    const isImage = type.startsWith('image/')
-    const isAudio = type.startsWith('audio/')
-    const isVideo = type.startsWith('video/')
-    if (!isImage && !isAudio && !isVideo) return
-
-    const objectUrl = URL.createObjectURL(file)
-
-    const fileCallbackToPromise = (fileObj: HTMLImageElement | HTMLAudioElement) => {
-      return Promise.race([
-        new Promise(resolve => {
-          if (fileObj instanceof HTMLImageElement) fileObj.onload = resolve
-          else fileObj.onloadedmetadata = resolve
-        }),
-        new Promise((_, reject) => {
-          setTimeout(reject, 1000)
-        }),
-      ])
-    }
-
-    try {
-      if (isImage) {
-        const img = new Image()
-        img.src = objectUrl
-        fileWithMeta.meta.previewUrl = objectUrl
-        await fileCallbackToPromise(img)
-        fileWithMeta.meta.width = img.width
-        fileWithMeta.meta.height = img.height
-      }
-
-      if (isAudio) {
-        const audio = new Audio()
-        audio.src = objectUrl
-        await fileCallbackToPromise(audio)
-        fileWithMeta.meta.duration = audio.duration
-      }
-
-      if (isVideo) {
-        const video = document.createElement('video')
-        video.src = objectUrl
-        await fileCallbackToPromise(video)
-        fileWithMeta.meta.duration = video.duration
-        fileWithMeta.meta.videoWidth = video.videoWidth
-        fileWithMeta.meta.videoHeight = video.videoHeight
-      }
-      if (!isImage) URL.revokeObjectURL(objectUrl)
-    } catch (e) {
-      URL.revokeObjectURL(objectUrl)
-    }
-    this.forceUpdate()
-  }
-
-  uploadFile = async (fileWithMeta: IFileWithMeta) => {
-    const { getUploadParams } = this.props
-    if (!getUploadParams) return
-    let params: IUploadParams | null = null
-    try {
-      params = await getUploadParams(fileWithMeta)
-    } catch (e) {
-      console.error('Error Upload Params', e.stack)
-    }
-    if (params === null) return
-    const { url, method = 'POST', body, fields = {}, headers = {}, meta: extraMeta = {} } = params
-    delete extraMeta.status
-
-    if (!url) {
-      fileWithMeta.meta.status = 'error_upload_params'
-      this.handleChangeStatus(fileWithMeta)
-      this.forceUpdate()
-      return
-    }
-
-    const xhr = new XMLHttpRequest()
-    const formData = new FormData()
-    xhr.open(method, url, true)
-
-    for (const field of Object.keys(fields)) formData.append(field, fields[field])
-    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest')
-    for (const header of Object.keys(headers)) xhr.setRequestHeader(header, headers[header])
-    fileWithMeta.meta = { ...fileWithMeta.meta, ...extraMeta }
-
-    // update progress (can be used to show progress indicator)
-    xhr.upload.addEventListener('progress', e => {
-      fileWithMeta.meta.percent = (e.loaded * 100.0) / e.total || 100
-      this.forceUpdate()
-    })
-
-    xhr.addEventListener('readystatechange', () => {
-      // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState
-      if (xhr.readyState !== 2 && xhr.readyState !== 4) return
-
-      if (xhr.status === 0 && fileWithMeta.meta.status !== 'aborted') {
-        fileWithMeta.meta.status = 'exception_upload'
-        this.handleChangeStatus(fileWithMeta)
-        this.forceUpdate()
-      }
-
-      if (xhr.status > 0 && xhr.status < 400) {
-        fileWithMeta.meta.percent = 100
-        if (xhr.readyState === 2) fileWithMeta.meta.status = 'headers_received'
-        if (xhr.readyState === 4) fileWithMeta.meta.status = 'done'
-        this.handleChangeStatus(fileWithMeta)
-        this.forceUpdate()
-      }
-
-      if (xhr.status >= 400 && fileWithMeta.meta.status !== 'error_upload') {
-        fileWithMeta.meta.status = 'error_upload'
-        this.handleChangeStatus(fileWithMeta)
-        this.forceUpdate()
-      }
-    })
-
-    formData.append('file', fileWithMeta.file)
-    if (this.props.timeout) xhr.timeout = this.props.timeout
-    xhr.send(body || formData)
-    fileWithMeta.xhr = xhr
-    fileWithMeta.meta.status = 'uploading'
-    this.handleChangeStatus(fileWithMeta)
-    this.forceUpdate()
-  }
-
-  render() {
-    const {
-      accept,
-      multiple,
-      maxFiles,
-      minSizeBytes,
-      maxSizeBytes,
-      onSubmit,
-      getUploadParams,
-      disabled,
-      canCancel,
-      canRemove,
-      canRestart,
-      inputContent,
-      inputWithFilesContent,
-      submitButtonDisabled,
-      submitButtonContent,
-      classNames,
-      styles,
-      addClassNames,
-      InputComponent,
-      PreviewComponent,
-      SubmitButtonComponent,
-      LayoutComponent,
-    } = this.props
-
-    const { active, dragged } = this.state
-
-    const reject = dragged.some(file => file.type !== 'application/x-moz-file' && !accepts(file as File, accept))
-    const extra = { active, reject, dragged, accept, multiple, minSizeBytes, maxSizeBytes, maxFiles } as IExtra
-    const files = [...this.files]
-    const dropzoneDisabled = resolveValue(disabled, files, extra)
-
-    const {
-      classNames: {
-        dropzone: dropzoneClassName,
-        dropzoneActive: dropzoneActiveClassName,
-        dropzoneReject: dropzoneRejectClassName,
-        dropzoneDisabled: dropzoneDisabledClassName,
-        input: inputClassName,
-        inputLabel: inputLabelClassName,
-        inputLabelWithFiles: inputLabelWithFilesClassName,
-        preview: previewClassName,
-        previewImage: previewImageClassName,
-        submitButtonContainer: submitButtonContainerClassName,
-        submitButton: submitButtonClassName,
-      },
-      styles: {
-        dropzone: dropzoneStyle,
-        dropzoneActive: dropzoneActiveStyle,
-        dropzoneReject: dropzoneRejectStyle,
-        dropzoneDisabled: dropzoneDisabledStyle,
-        input: inputStyle,
-        inputLabel: inputLabelStyle,
-        inputLabelWithFiles: inputLabelWithFilesStyle,
-        preview: previewStyle,
-        previewImage: previewImageStyle,
-        submitButtonContainer: submitButtonContainerStyle,
-        submitButton: submitButtonStyle,
-      },
-    } = mergeStyles(classNames, styles, addClassNames, files, extra)
-
-    const Input = InputComponent || InputDefault
-    const Preview = PreviewComponent || PreviewDefault
-    const SubmitButton = SubmitButtonComponent || SubmitButtonDefault
-    const Layout = LayoutComponent || LayoutDefault
-
-    let previews = null
-    if (PreviewComponent !== null) {
-      previews = files.map(f => {
-        return (
-          //@ts-ignore
-          <Preview
-            className={previewClassName}
-            imageClassName={previewImageClassName}
-            style={previewStyle as React.CSSProperties}
-            imageStyle={previewImageStyle as React.CSSProperties}
-            key={f.meta.id}
-            fileWithMeta={f}
-            meta={{ ...f.meta }}
-            isUpload={Boolean(getUploadParams)}
-            canCancel={resolveValue(canCancel, files, extra)}
-            canRemove={resolveValue(canRemove, files, extra)}
-            canRestart={resolveValue(canRestart, files, extra)}
-            files={files}
-            extra={extra}
-          />
-        )
-      })
-    }
-
-    const input =
-      InputComponent !== null ? (
-        //@ts-ignore
-        <Input
-          className={inputClassName}
-          labelClassName={inputLabelClassName}
-          labelWithFilesClassName={inputLabelWithFilesClassName}
-          style={inputStyle as React.CSSProperties}
-          labelStyle={inputLabelStyle as React.CSSProperties}
-          labelWithFilesStyle={inputLabelWithFilesStyle as React.CSSProperties}
-          getFilesFromEvent={this.getFilesFromEvent() as IInputProps['getFilesFromEvent']}
-          accept={accept}
-          multiple={multiple}
-          disabled={dropzoneDisabled}
-          content={resolveValue(inputContent, files, extra)}
-          withFilesContent={resolveValue(inputWithFilesContent, files, extra)}
-          onFiles={this.handleFiles} // see: https://stackoverflow.com/questions/39484895
-          files={files}
-          extra={extra}
-        />
-      ) : null
-
-    const submitButton =
-      onSubmit && SubmitButtonComponent !== null ? (
-        //@ts-ignore
-        <SubmitButton
-          className={submitButtonContainerClassName}
-          buttonClassName={submitButtonClassName}
-          style={submitButtonContainerStyle as React.CSSProperties}
-          buttonStyle={submitButtonStyle as React.CSSProperties}
-          disabled={resolveValue(submitButtonDisabled, files, extra)}
-          content={resolveValue(submitButtonContent, files, extra)}
-          onSubmit={this.handleSubmit}
-          files={files}
-          extra={extra}
-        />
-      ) : null
-
-    let className = dropzoneClassName
-    let style = dropzoneStyle
-
-    if (dropzoneDisabled) {
-      className = `${className} ${dropzoneDisabledClassName}`
-      style = { ...(style || {}), ...(dropzoneDisabledStyle || {}) }
-    } else if (reject) {
-      className = `${className} ${dropzoneRejectClassName}`
-      style = { ...(style || {}), ...(dropzoneRejectStyle || {}) }
-    } else if (active) {
-      className = `${className} ${dropzoneActiveClassName}`
-      style = { ...(style || {}), ...(dropzoneActiveStyle || {}) }
-    }
-
-    return (
-      //@ts-ignore
-      <Layout
-        input={input}
-        previews={previews}
-        submitButton={submitButton}
-        dropzoneProps={{
-          ref: this.dropzone,
-          className,
-          style: style as React.CSSProperties,
-          onDragEnter: this.handleDragEnter,
-          onDragOver: this.handleDragOver,
-          onDragLeave: this.handleDragLeave,
-          onDrop: dropzoneDisabled ? this.handleDropDisabled : this.handleDrop,
-        }}
-        files={files}
-        extra={
-          {
-            ...extra,
-            onFiles: this.handleFiles,
-            onCancelFile: this.handleCancel,
-            onRemoveFile: this.handleRemove,
-            onRestartFile: this.handleRestart,
-          } as IExtraLayout
-        }
-      />
-    )
-  }
-}
-
-Dropzone.defaultProps = {
-  accept: '*',
-  multiple: true,
-  minSizeBytes: 0,
-  maxSizeBytes: Number.MAX_SAFE_INTEGER,
-  maxFiles: Number.MAX_SAFE_INTEGER,
-  autoUpload: true,
-  disabled: false,
-  canCancel: true,
-  canRemove: true,
-  canRestart: true,
-  inputContent: 'Drag Files or Click to Browse',
-  inputWithFilesContent: 'Add Files',
-  submitButtonDisabled: false,
-  submitButtonContent: 'Submit',
-  classNames: {},
-  styles: {},
-  addClassNames: {},
-}
-
-// @ts-ignore
-Dropzone.propTypes = {
-  onChangeStatus: PropTypes.func,
-  getUploadParams: PropTypes.func,
-  onSubmit: PropTypes.func,
-
-  getFilesFromEvent: PropTypes.func,
-  getDataTransferItemsFromEvent: PropTypes.func,
-
-  accept: PropTypes.string,
-  multiple: PropTypes.bool,
-  minSizeBytes: PropTypes.number.isRequired,
-  maxSizeBytes: PropTypes.number.isRequired,
-  maxFiles: PropTypes.number.isRequired,
-
-  validate: PropTypes.func,
-
-  autoUpload: PropTypes.bool,
-  timeout: PropTypes.number,
-
-  initialFiles: PropTypes.arrayOf(PropTypes.any),
-
-  /* component customization */
-  disabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
-
-  canCancel: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
-  canRemove: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
-  canRestart: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
-
-  inputContent: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
-  inputWithFilesContent: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
-
-  submitButtonDisabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
-  submitButtonContent: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
-
-  classNames: PropTypes.object.isRequired,
-  styles: PropTypes.object.isRequired,
-  addClassNames: PropTypes.object.isRequired,
-
-  /* component injection */
-  InputComponent: PropTypes.func,
-  PreviewComponent: PropTypes.func,
-  SubmitButtonComponent: PropTypes.func,
-  LayoutComponent: PropTypes.func,
-}
-
-export default Dropzone
-export {
-  LayoutDefault as Layout,
-  InputDefault as Input,
-  PreviewDefault as Preview,
-  SubmitButtonDefault as SubmitButton,
-  formatBytes,
-  formatDuration,
-  accepts,
-  defaultClassNames,
-  defaultGetFilesFromEvent as getFilesFromEvent,
-}
diff --git a/node_modules/react-dropzone-uploader/dist/Input.tsx b/node_modules/react-dropzone-uploader/dist/Input.tsx
deleted file mode 100644
index fb344b4..0000000
--- a/node_modules/react-dropzone-uploader/dist/Input.tsx
+++ /dev/null
@@ -1,76 +0,0 @@
-import React from 'react'
-import PropTypes from 'prop-types'
-
-import { IInputProps } from './Dropzone'
-
-const Input = (props: IInputProps) => {
-  const {
-    className,
-    labelClassName,
-    labelWithFilesClassName,
-    style,
-    labelStyle,
-    labelWithFilesStyle,
-    getFilesFromEvent,
-    accept,
-    multiple,
-    disabled,
-    content,
-    withFilesContent,
-    onFiles,
-    files,
-  } = props
-
-  return (
-    <label
-      className={files.length > 0 ? labelWithFilesClassName : labelClassName}
-      style={files.length > 0 ? labelWithFilesStyle : labelStyle}
-    >
-      {files.length > 0 ? withFilesContent : content}
-      <input
-        className={className}
-        style={style}
-        type="file"
-        accept={accept}
-        multiple={multiple}
-        disabled={disabled}
-        onChange={async e => {
-          const target = e.target
-          const chosenFiles = await getFilesFromEvent(e)
-          onFiles(chosenFiles)
-          //@ts-ignore
-          target.value = null
-        }}
-      />
-    </label>
-  )
-}
-
-Input.propTypes = {
-  className: PropTypes.string,
-  labelClassName: PropTypes.string,
-  labelWithFilesClassName: PropTypes.string,
-  style: PropTypes.object,
-  labelStyle: PropTypes.object,
-  labelWithFilesStyle: PropTypes.object,
-  getFilesFromEvent: PropTypes.func.isRequired,
-  accept: PropTypes.string.isRequired,
-  multiple: PropTypes.bool.isRequired,
-  disabled: PropTypes.bool.isRequired,
-  content: PropTypes.node,
-  withFilesContent: PropTypes.node,
-  onFiles: PropTypes.func.isRequired,
-  files: PropTypes.arrayOf(PropTypes.any).isRequired,
-  extra: PropTypes.shape({
-    active: PropTypes.bool.isRequired,
-    reject: PropTypes.bool.isRequired,
-    dragged: PropTypes.arrayOf(PropTypes.any).isRequired,
-    accept: PropTypes.string.isRequired,
-    multiple: PropTypes.bool.isRequired,
-    minSizeBytes: PropTypes.number.isRequired,
-    maxSizeBytes: PropTypes.number.isRequired,
-    maxFiles: PropTypes.number.isRequired,
-  }).isRequired,
-}
-
-export default Input
diff --git a/node_modules/react-dropzone-uploader/dist/Layout.tsx b/node_modules/react-dropzone-uploader/dist/Layout.tsx
deleted file mode 100644
index 9b8806d..0000000
--- a/node_modules/react-dropzone-uploader/dist/Layout.tsx
+++ /dev/null
@@ -1,57 +0,0 @@
-import React from 'react'
-import PropTypes from 'prop-types'
-
-import { ILayoutProps } from './Dropzone'
-
-const Layout = (props: ILayoutProps) => {
-  const {
-    input,
-    previews,
-    submitButton,
-    dropzoneProps,
-    files,
-    extra: { maxFiles },
-  } = props
-
-  return (
-    <div {...dropzoneProps}>
-      {previews}
-
-      {files.length < maxFiles && input}
-
-      {files.length > 0 && submitButton}
-    </div>
-  )
-}
-
-Layout.propTypes = {
-  input: PropTypes.node,
-  previews: PropTypes.arrayOf(PropTypes.node),
-  submitButton: PropTypes.node,
-  dropzoneProps: PropTypes.shape({
-    ref: PropTypes.any.isRequired,
-    className: PropTypes.string.isRequired,
-    style: PropTypes.object,
-    onDragEnter: PropTypes.func.isRequired,
-    onDragOver: PropTypes.func.isRequired,
-    onDragLeave: PropTypes.func.isRequired,
-    onDrop: PropTypes.func.isRequired,
-  }).isRequired,
-  files: PropTypes.arrayOf(PropTypes.any).isRequired,
-  extra: PropTypes.shape({
-    active: PropTypes.bool.isRequired,
-    reject: PropTypes.bool.isRequired,
-    dragged: PropTypes.arrayOf(PropTypes.any).isRequired,
-    accept: PropTypes.string.isRequired,
-    multiple: PropTypes.bool.isRequired,
-    minSizeBytes: PropTypes.number.isRequired,
-    maxSizeBytes: PropTypes.number.isRequired,
-    maxFiles: PropTypes.number.isRequired,
-    onFiles: PropTypes.func.isRequired,
-    onCancelFile: PropTypes.func.isRequired,
-    onRemoveFile: PropTypes.func.isRequired,
-    onRestartFile: PropTypes.func.isRequired,
-  }).isRequired,
-}
-
-export default Layout
diff --git a/node_modules/react-dropzone-uploader/dist/Preview.tsx b/node_modules/react-dropzone-uploader/dist/Preview.tsx
deleted file mode 100644
index 59122f5..0000000
--- a/node_modules/react-dropzone-uploader/dist/Preview.tsx
+++ /dev/null
@@ -1,139 +0,0 @@
-import React from 'react'
-import PropTypes from 'prop-types'
-
-import { formatBytes, formatDuration } from './utils'
-import { IPreviewProps } from './Dropzone'
-//@ts-ignore
-import cancelImg from './assets/cancel.svg'
-//@ts-ignore
-import removeImg from './assets/remove.svg'
-//@ts-ignore
-import restartImg from './assets/restart.svg'
-
-const iconByFn = {
-  cancel: { backgroundImage: `url(${cancelImg})` },
-  remove: { backgroundImage: `url(${removeImg})` },
-  restart: { backgroundImage: `url(${restartImg})` },
-}
-
-class Preview extends React.PureComponent<IPreviewProps> {
-  render() {
-    const {
-      className,
-      imageClassName,
-      style,
-      imageStyle,
-      fileWithMeta: { cancel, remove, restart },
-      meta: { name = '', percent = 0, size = 0, previewUrl, status, duration, validationError },
-      isUpload,
-      canCancel,
-      canRemove,
-      canRestart,
-      extra: { minSizeBytes },
-    } = this.props
-
-    let title = `${name || '?'}, ${formatBytes(size)}`
-    if (duration) title = `${title}, ${formatDuration(duration)}`
-
-    if (status === 'error_file_size' || status === 'error_validation') {
-      return (
-        <div className={className} style={style}>
-          <span className="dzu-previewFileNameError">{title}</span>
-          {status === 'error_file_size' && <span>{size < minSizeBytes ? 'File too small' : 'File too big'}</span>}
-          {status === 'error_validation' && <span>{String(validationError)}</span>}
-          {canRemove && <span className="dzu-previewButton" style={iconByFn.remove} onClick={remove} />}
-        </div>
-      )
-    }
-
-    if (status === 'error_upload_params' || status === 'exception_upload' || status === 'error_upload') {
-      title = `${title} (upload failed)`
-    }
-    if (status === 'aborted') title = `${title} (cancelled)`
-
-    return (
-      <div className={className} style={style}>
-        {previewUrl && <img className={imageClassName} style={imageStyle} src={previewUrl} alt={title} title={title} />}
-        {!previewUrl && <span className="dzu-previewFileName">{title}</span>}
-
-        <div className="dzu-previewStatusContainer">
-          {isUpload && (
-            <progress max={100} value={status === 'done' || status === 'headers_received' ? 100 : percent} />
-          )}
-
-          {status === 'uploading' && canCancel && (
-            <span className="dzu-previewButton" style={iconByFn.cancel} onClick={cancel} />
-          )}
-          {status !== 'preparing' && status !== 'getting_upload_params' && status !== 'uploading' && canRemove && (
-            <span className="dzu-previewButton" style={iconByFn.remove} onClick={remove} />
-          )}
-          {['error_upload_params', 'exception_upload', 'error_upload', 'aborted', 'ready'].includes(status) &&
-            canRestart && <span className="dzu-previewButton" style={iconByFn.restart} onClick={restart} />}
-        </div>
-      </div>
-    )
-  }
-}
-
-// @ts-ignore
-Preview.propTypes = {
-  className: PropTypes.string,
-  imageClassName: PropTypes.string,
-  style: PropTypes.object,
-  imageStyle: PropTypes.object,
-  fileWithMeta: PropTypes.shape({
-    file: PropTypes.any.isRequired,
-    meta: PropTypes.object.isRequired,
-    cancel: PropTypes.func.isRequired,
-    restart: PropTypes.func.isRequired,
-    remove: PropTypes.func.isRequired,
-    xhr: PropTypes.any,
-  }).isRequired,
-  // copy of fileWithMeta.meta, won't be mutated
-  meta: PropTypes.shape({
-    status: PropTypes.oneOf([
-      'preparing',
-      'error_file_size',
-      'error_validation',
-      'ready',
-      'getting_upload_params',
-      'error_upload_params',
-      'uploading',
-      'exception_upload',
-      'aborted',
-      'error_upload',
-      'headers_received',
-      'done',
-    ]).isRequired,
-    type: PropTypes.string.isRequired,
-    name: PropTypes.string,
-    uploadedDate: PropTypes.string.isRequired,
-    percent: PropTypes.number,
-    size: PropTypes.number,
-    lastModifiedDate: PropTypes.string,
-    previewUrl: PropTypes.string,
-    duration: PropTypes.number,
-    width: PropTypes.number,
-    height: PropTypes.number,
-    videoWidth: PropTypes.number,
-    videoHeight: PropTypes.number,
-    validationError: PropTypes.any,
-  }).isRequired,
-  isUpload: PropTypes.bool.isRequired,
-  canCancel: PropTypes.bool.isRequired,
-  canRemove: PropTypes.bool.isRequired,
-  canRestart: PropTypes.bool.isRequired,
-  files: PropTypes.arrayOf(PropTypes.any).isRequired, // eslint-disable-line react/no-unused-prop-types
-  extra: PropTypes.shape({
-    active: PropTypes.bool.isRequired,
-    reject: PropTypes.bool.isRequired,
-    dragged: PropTypes.arrayOf(PropTypes.any).isRequired,
-    accept: PropTypes.string.isRequired,
-    multiple: PropTypes.bool.isRequired,
-    minSizeBytes: PropTypes.number.isRequired,
-    maxSizeBytes: PropTypes.number.isRequired,
-    maxFiles: PropTypes.number.isRequired,
-  }).isRequired,
-}
-
-export default Preview
diff --git a/node_modules/react-dropzone-uploader/dist/SubmitButton.tsx b/node_modules/react-dropzone-uploader/dist/SubmitButton.tsx
deleted file mode 100644
index b7706f5..0000000
--- a/node_modules/react-dropzone-uploader/dist/SubmitButton.tsx
+++ /dev/null
@@ -1,47 +0,0 @@
-import React from 'react'
-import PropTypes from 'prop-types'
-
-import { ISubmitButtonProps } from './Dropzone'
-
-const SubmitButton = (props: ISubmitButtonProps) => {
-  const { className, buttonClassName, style, buttonStyle, disabled, content, onSubmit, files } = props
-
-  const _disabled =
-    files.some(f => ['preparing', 'getting_upload_params', 'uploading'].includes(f.meta.status)) ||
-    !files.some(f => ['headers_received', 'done'].includes(f.meta.status))
-
-  const handleSubmit = () => {
-    onSubmit(files.filter(f => ['headers_received', 'done'].includes(f.meta.status)))
-  }
-
-  return (
-    <div className={className} style={style}>
-      <button className={buttonClassName} style={buttonStyle} onClick={handleSubmit} disabled={disabled || _disabled}>
-        {content}
-      </button>
-    </div>
-  )
-}
-
-SubmitButton.propTypes = {
-  className: PropTypes.string,
-  buttonClassName: PropTypes.string,
-  style: PropTypes.object,
-  buttonStyle: PropTypes.object,
-  disabled: PropTypes.bool.isRequired,
-  content: PropTypes.node,
-  onSubmit: PropTypes.func.isRequired,
-  files: PropTypes.arrayOf(PropTypes.object).isRequired,
-  extra: PropTypes.shape({
-    active: PropTypes.bool.isRequired,
-    reject: PropTypes.bool.isRequired,
-    dragged: PropTypes.arrayOf(PropTypes.any).isRequired,
-    accept: PropTypes.string.isRequired,
-    multiple: PropTypes.bool.isRequired,
-    minSizeBytes: PropTypes.number.isRequired,
-    maxSizeBytes: PropTypes.number.isRequired,
-    maxFiles: PropTypes.number.isRequired,
-  }).isRequired,
-}
-
-export default SubmitButton
diff --git a/node_modules/react-dropzone-uploader/dist/utils.ts b/node_modules/react-dropzone-uploader/dist/utils.ts
deleted file mode 100644
index 707918d..0000000
--- a/node_modules/react-dropzone-uploader/dist/utils.ts
+++ /dev/null
@@ -1,113 +0,0 @@
-import React from 'react'
-import { IStyleCustomization } from './Dropzone'
-
-export const formatBytes = (b: number) => {
-  const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
-  let l = 0
-  let n = b
-
-  while (n >= 1024) {
-    n /= 1024
-    l += 1
-  }
-
-  return `${n.toFixed(n >= 10 || l < 1 ? 0 : 1)}${units[l]}`
-}
-
-export const formatDuration = (seconds: number) => {
-  const date = new Date(0)
-  date.setSeconds(seconds)
-  const dateString = date.toISOString().slice(11, 19)
-  if (seconds < 3600) return dateString.slice(3)
-  return dateString
-}
-
-// adapted from: https://github.com/okonet/attr-accept/blob/master/src/index.js
-// returns true if file.name is empty and accept string is something like ".csv",
-// because file comes from dataTransferItem for drag events, and
-// dataTransferItem.name is always empty
-export const accepts = (file: File, accept: string) => {
-  if (!accept || accept === '*') return true
-
-  const mimeType = file.type || ''
-  const baseMimeType = mimeType.replace(/\/.*$/, '')
-
-  return accept
-    .split(',')
-    .map(t => t.trim())
-    .some(type => {
-      if (type.charAt(0) === '.') {
-        return file.name === undefined || file.name.toLowerCase().endsWith(type.toLowerCase())
-      } else if (type.endsWith('/*')) {
-        // this is something like an image/* mime type
-        return baseMimeType === type.replace(/\/.*$/, '')
-      }
-      return mimeType === type
-    })
-}
-
-type ResolveFn<T> = (...args: any[]) => T
-
-export const resolveValue = <T = any>(value: ResolveFn<T> | T, ...args: any[]) => {
-  if (typeof value === 'function') return (value as ResolveFn<T>)(...args)
-  return value
-}
-
-export const defaultClassNames = {
-  dropzone: 'dzu-dropzone',
-  dropzoneActive: 'dzu-dropzoneActive',
-  dropzoneReject: 'dzu-dropzoneActive',
-  dropzoneDisabled: 'dzu-dropzoneDisabled',
-  input: 'dzu-input',
-  inputLabel: 'dzu-inputLabel',
-  inputLabelWithFiles: 'dzu-inputLabelWithFiles',
-  preview: 'dzu-previewContainer',
-  previewImage: 'dzu-previewImage',
-  submitButtonContainer: 'dzu-submitButtonContainer',
-  submitButton: 'dzu-submitButton',
-}
-
-export const mergeStyles = (
-  classNames: IStyleCustomization<string>,
-  styles: IStyleCustomization<React.CSSProperties>,
-  addClassNames: IStyleCustomization<string>,
-  ...args: any[]
-) => {
-  const resolvedClassNames: { [property: string]: string } = { ...defaultClassNames }
-  const resolvedStyles = { ...styles } as { [property: string]: string }
-
-  for (const [key, value] of Object.entries(classNames)) {
-    resolvedClassNames[key] = resolveValue(value, ...args)
-  }
-
-  for (const [key, value] of Object.entries(addClassNames)) {
-    resolvedClassNames[key] = `${resolvedClassNames[key]} ${resolveValue(value, ...args)}`
-  }
-
-  for (const [key, value] of Object.entries(styles)) {
-    resolvedStyles[key] = resolveValue(value, ...args)
-  }
-
-  return { classNames: resolvedClassNames, styles: resolvedStyles as IStyleCustomization<React.CSSProperties> }
-}
-
-export const getFilesFromEvent = (
-  event: React.DragEvent<HTMLElement> | React.ChangeEvent<HTMLInputElement>,
-): Array<File | DataTransferItem> => {
-  let items = null
-
-  if ('dataTransfer' in event) {
-    const dt = event.dataTransfer
-
-    // NOTE: Only the 'drop' event has access to DataTransfer.files, otherwise it will always be empty
-    if ('files' in dt && dt.files.length) {
-      items = dt.files
-    } else if (dt.items && dt.items.length) {
-      items = dt.items
-    }
-  } else if (event.target && event.target.files) {
-    items = event.target.files
-  }
-
-  return Array.prototype.slice.call(items)
-}
